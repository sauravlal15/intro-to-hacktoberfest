Probelm Statement
---------------------
A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)

You are given some events [startTime, endTime), after each given event, return an integer k representing the maximum k-booking between all the previous events.

Implement the MyCalendarThree class:

MyCalendarThree() Initializes the object.
int book(int startTime, int endTime) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.

Example
----------
Input
["MyCalendarThree", "book", "book", "book", "book", "book", "book"]
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]
Output
[null, 1, 1, 2, 3, 3, 3]

Explanation
MyCalendarThree myCalendarThree = new MyCalendarThree();
myCalendarThree.book(10, 20); // return 1
myCalendarThree.book(50, 60); // return 1
myCalendarThree.book(10, 40); // return 2
myCalendarThree.book(5, 15); // return 3
myCalendarThree.book(5, 10); // return 3
myCalendarThree.book(25, 55); // return 3

Approach
----------
The idea here is to add 1 every time an event starts and subtract 1 every time an event ends.
Then use the running sum of the events to find the maximum overlap.

i.e. [[1, 3], [2, 4], [7, 9]]
     time =    [1, 2,  3,  4, 7,  9]
     events =  [1, 1, -1, -1, 1, -1] # +1 for events STARTING at 1, 2, 7 and -1 for events ENDING at 3, 4, 9
	 overlap = [1, 2,  1,  0, 1,  0]
Here the maximum overlap is 2.

Solution
-------------

class MyCalendarThree:

    def __init__(self):
        self.events = []
    def book(self, start: int, end: int) -> int:

        bisect.insort(self.events, (start, 1))
        bisect.insort(self.events, (end, -1))

        count = res = 0
        for i in range(len(self.events)):
          count += self.events[i][1]
          res = max(res, count)
        return res

    def book(self, start: int, end: int) -> int:
        bisect.insort(self.events, (start, 1))
        bisect.insort(self.events, (end, -1))
        return max(itertools.accumulate(list(zip(*self.events))[1]))




